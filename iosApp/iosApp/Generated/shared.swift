// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import shared

/**
 * selector: ClassContext/KMP_Redux:shared/kmp/redux/Test */
public enum TestKs {

  case test1(Test.Test1)
  case test2

  var sealed: Test {
    switch self {
    case .test1(let obj):
      return obj
    case .test2:
      return shared.Test.Test2()
    }
  }

  public init(_ obj: Test) {
    if let obj = obj as? shared.Test.Test1 {
      self = .test1(obj)
    } else if obj is shared.Test.Test2 {
      self = .test2
    } else {
      fatalError("TestKs not syncronized with Test class")
    }
  }

}

/**
 * selector: ClassContext/KMP_Redux:shared/kmp/redux/redux/AppAction */
public enum AppActionKs {

  case counter(AppAction.Counter)
  case space(AppAction.Space)

  var sealed: AppAction {
    switch self {
    case .counter(let obj):
      return obj
    case .space(let obj):
      return obj
    }
  }

  public init(_ obj: AppAction) {
    if let obj = obj as? shared.AppAction.Counter {
      self = .counter(obj)
    } else if let obj = obj as? shared.AppAction.Space {
      self = .space(obj)
    } else {
      fatalError("AppActionKs not syncronized with AppAction class")
    }
  }

}

/**
 * selector: ClassContext/KMP_Redux:shared/kmp/redux/features/space/redux/SpaceAction */
public enum SpaceActionKs {

  case fetchPeopleInSpace
  case fetchPeopleInSpaceSlow

  var sealed: SpaceAction {
    switch self {
    case .fetchPeopleInSpace:
      return shared.SpaceAction.FetchPeopleInSpace()
    case .fetchPeopleInSpaceSlow:
      return shared.SpaceAction.FetchPeopleInSpaceSlow()
    }
  }

  public init(_ obj: SpaceAction) {
    if obj is shared.SpaceAction.FetchPeopleInSpace {
      self = .fetchPeopleInSpace
    } else if obj is shared.SpaceAction.FetchPeopleInSpaceSlow {
      self = .fetchPeopleInSpaceSlow
    } else {
      fatalError("SpaceActionKs not syncronized with SpaceAction class")
    }
  }

}

public extension shared.SpaceState.Status {
  var `enum`: SpaceState.Status.Enum {
    if self == shared.SpaceState.Status.idle {
      return .idle
    } else if self == shared.SpaceState.Status.pending {
      return .pending
    } else {
      fatalError("SpaceState.Status not synchronized")
    }
  }
  enum Enum {

    case idle
    case pending

  }
}

/**
 * selector: ClassContext/KMP_Redux:shared/kmp/redux/features/counter/CounterAction */
public enum CounterActionKs {

  case decrement
  case increment

  var sealed: CounterAction {
    switch self {
    case .decrement:
      return shared.CounterAction.Decrement()
    case .increment:
      return shared.CounterAction.Increment()
    }
  }

  public init(_ obj: CounterAction) {
    if obj is shared.CounterAction.Decrement {
      self = .decrement
    } else if obj is shared.CounterAction.Increment {
      self = .increment
    } else {
      fatalError("CounterActionKs not syncronized with CounterAction class")
    }
  }

}
